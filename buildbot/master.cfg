# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

PULP_REPO_NAMES=['pulp', 'pulp_rpm', 'pulp_puppet']

c = BuildmasterConfig = {}

####### DEBUGGING
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","dog8code")

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

for repo_name in PULP_REPO_NAMES:
	c['change_source'].append(GitPoller(
		'https://github.com/pulp/%s.git' % repo_name,
		workdir='gitpoller-workdir-%s' % repo_name, branch='pulp-2.3',
		category='%s' % repo_name,
		pollinterval=300))

c['change_source'].append(GitPoller(
	'https://github.com/jortel/gofer.git',
	workdir='gitpoller-workdir-gofer',
	branch='gofer-0.77',
	category='gofer',
	pollinterval=300))

c['change_source'].append(GitPoller(
	'https://github.com/pulp/nectar.git',
	workdir='gitpoller-workdir-nectar',
	branch='master',
	category='nectar',
	pollinterval=300))

c['change_source'].append(GitPoller(
        'https://github.com/RedHatQE/pulp-automation.git',
        workdir='gitpoller-workdir-pulp_auto', branch='master',
	category='pulp_auto',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
for repo_name in PULP_REPO_NAMES:
	c['schedulers'].append(SingleBranchScheduler(
        	name=repo_name,
                change_filter=filter.ChangeFilter(category=repo_name, branch='pulp-2.3'),
                treeStableTimer=None,
                builderNames=[repo_name]))

c['schedulers'].append(SingleBranchScheduler(
	name='gofer',
	change_filter=filter.ChangeFilter(category='gofer', branch='gofer-0.77'),
	treeStableTimer=None,
	builderNames=['gofer']))

c['schedulers'].append(SingleBranchScheduler(
	name='nectar',
	change_filter=filter.ChangeFilter(category='nectar', branch='master'),
	treeStableTimer=None,
	builderNames=['nectar']))

c['schedulers'].append(SingleBranchScheduler(
                            name="pulp_auto",
                            change_filter=filter.ChangeFilter(category='pulp_auto', branch='master'),
                            treeStableTimer=None,
                            builderNames=["pulp_auto"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["pulp", "pulp_puppet", "pulp_rpm", "pulp_auto", "gofer", "nectar"]))

from buildbot.scheduler import Try_Userpass
c['schedulers'].append(Try_Userpass(
                                    name='try',
                                    builderNames=["pulp", "pulp_puppet", "pulp_rpm", "pulp_auto", "gofer", "nectar"],
                                    port=5555,
                                    userpass=[('buildbot','dog8code')]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig
from buildbot import locks

exclusive_slave_lock = locks.SlaveLock("exclusive")

c['builders'] = []

# for all the pulp_* parts
for repo_name in PULP_REPO_NAMES:
	factory = BuildFactory()
	factory.addStep(Git(repourl='https://github.com/pulp/%s.git' % repo_name, mode='full', haltOnFailure=True))
        factory.addStep(ShellCommand(command=["tito", "build", "--test", "--rpm", "--debug", "--offline"], haltOnFailure=True))
	factory.addStep(ShellCommand(command=["wget", "-N", "https://raw.github.com/pulp/pulp/master/comps.xml"], workdir="/tmp/tito", haltOnFailure=True))
	factory.addStep(ShellCommand(command=["createrepo", "-v", "-g", "comps.xml", "/tmp/tito"], haltOnFailure=True))
	factory.addStep(ShellCommand(command=["sudo", "systemctl", "stop", "httpd.service"], haltOnFailure=True))
	factory.addStep(ShellCommand(command=["sudo", "yum", 'update', '-y'], haltOnFailure=True))
	factory.addStep(ShellCommand(command=["sudo", "pulp-manage-db"], haltOnFailure=True))
	factory.addStep(ShellCommand(command=["sudo", "systemctl", "start", "httpd.service"], haltOnFailure=True))
	factory.addStep(ShellCommand(command=["nosetests" , "-vs"], workdir='/usr/share/pulp_auto/', haltOnFailure=True))
	c['builders'].append(
		BuilderConfig(name=repo_name,
			slavenames=["example-slave"],
			factory=factory, locks=[exclusive_slave_lock.access('exclusive')]))

gofer_factory = BuildFactory()
gofer_factory.addStep(Git(repourl='https://github.com/jortel/gofer.git', mode='full'))
gofer_factory.addStep(ShellCommand(command=["tito", "build", "--test", "--rpm", "--debug", "--offline"], haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["wget", "-N", "https://raw.github.com/pulp/pulp/master/comps.xml"], workdir="/tmp/tito", haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["createrepo", "-v", "-g", "comps.xml", "/tmp/tito"], haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["sudo", "systemctl", "stop", "httpd.service"], haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["sudo", "yum", 'update', '-y'], haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["sudo", "pulp-manage-db"], haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["sudo", "systemctl", "start", "httpd.service"], haltOnFailure=True))
gofer_factory.addStep(ShellCommand(command=["nosetests" , "-vs"], workdir='/usr/share/pulp_auto/', haltOnFailure=True))

c['builders'].append(
	BuilderConfig(name='gofer',
		slavenames=["example-slave"],
		factory=gofer_factory, locks=[exclusive_slave_lock.access('exclusive')]))

nectar_factory = BuildFactory()
nectar_factory.addStep(Git(repourl='https://github.com/pulp/nectar.git', mode='full'))
nectar_factory.addStep(ShellCommand(command=["tito", "build", "--test", "--rpm", "--debug", "--offline"], haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["wget", "-N", "https://raw.github.com/pulp/pulp/master/comps.xml"], workdir="/tmp/tito", haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["createrepo", "-v", "-g", "comps.xml", "/tmp/tito"], haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["sudo", "systemctl", "stop", "httpd.service"], haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["sudo", "yum", 'update', '-y'], haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["sudo", "pulp-manage-db"], haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["sudo", "systemctl", "start", "httpd.service"], haltOnFailure=True))
nectar_factory.addStep(ShellCommand(command=["nosetests" , "-vs"], workdir='/usr/share/pulp_auto/', haltOnFailure=True))

c['builders'].append(
	BuilderConfig(name='nectar',
		slavenames=["example-slave"],
		factory=nectar_factory, locks=[exclusive_slave_lock.access('exclusive')]))

# for pulp_auto only
pulp_auto_factory = BuildFactory()
pulp_auto_factory.addStep(Git(repourl='https://github.com/RedHatQE/pulp-automation.git', mode='full'))
pulp_auto_factory.addStep(ShellCommand(command=["tito", "build", "--test", "--rpm", "--install"], haltOnFailure=True))
pulp_auto_factory.addStep(ShellCommand(command=["nosetests" , "-vs"], workdir='/usr/share/pulp_auto/', haltOnFailure=True)) 

c['builders'].append(
    BuilderConfig(name="pulp_auto",
      slavenames=["example-slave"],
      factory=pulp_auto_factory, locks=[exclusive_slave_lock.access('exclusive')]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("buildbot","dog8code")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "PULP"
c['titleURL'] = "http://www.pulpproject.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
